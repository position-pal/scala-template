# ************************************** scalafmt configuration **************************************
# See configuration documentation at [https://scalameta.org/scalafmt/docs/configuration.html]
# ****************************************************************************************************

# Specifies the version of Scalafmt to use for formatting.
version = 3.8.2

# Sets the default configuration preset.
preset = default

# Defines the dialect of Scala used for formatting, here it's Scala 3.
runner.dialect = scala3

# Maximum number of characters in a line before it gets wrapped.
maxColumn = 120

# Alignment settings: do not align tokens or multiline expressions.
align.preset = none
align.multiline = false

# Trailing commas settings: always add a trailing comma where possible.
rewrite.trailingCommas.style = always

# Newlines settings: control the insertion of new lines in various scenarios.
newlines.alwaysBeforeMultilineDef = false
newlines.selectChains = fold

# Docstrings settings: control the formatting of Scaladoc comments.
docstrings.oneline = fold
docstrings.removeEmpty = true
docstrings.style = Asterisk
docstrings.wrapMaxColumn = 80
docstrings.wrap = no

# Preserve the original line endings from the source files.
lineEndings = preserve

# Assume that the standard library's `stripMargin` method is used for multi-line strings.
assumeStandardLibraryStripMargin = true

# Do not include curly braces in select chains.
includeCurlyBraceInSelectChains = false

# Dangling parentheses settings: follow the preset configuration.
danglingParentheses.preset = true

# Annotations newlines settings: insert newlines around annotations.
optIn.annotationNewlines = true

# Exclude certain paths from formatting.
project.excludePaths = ["glob:**/scalafix/input/**", "glob:**/scalafix/output/**"]

# Rewrite rules: apply specific code rewrite rules.
rewrite.rules = [RedundantBraces]

# Redundant braces settings: do not remove braces around general expressions.
rewrite.redundantBraces.generalExpressions = false

# Token replacements: replace specific Scala tokens with their alternatives.
rewriteTokens = {
  "⇒": "=>"
  "→": "->"
  "←": "<-"
}